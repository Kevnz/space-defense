(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var globals = {
  bullets: null,
  enemies: null,
  player: null
};
var update = require('./game/update');
var preload = require('./game/preload');
var create = require('./game/create');
var game = window.game = new Phaser.Game(800, 600, Phaser.AUTO, '', {
  preload: preload,
  create: create,
  update: update
});


},{"./game/create":2,"./game/preload":4,"./game/update":6}],2:[function(require,module,exports){
"use strict";
function resetBullet(bullet) {
  bullet.kill();
}
;
function setupEnemy(enemy) {
  enemy.anchor.x = 0.5;
  enemy.anchor.y = 0.5;
  enemy.animations.add('explode');
}
;
module.exports = function() {
  game.physics.startSystem(Phaser.Physics.ARCADE);
  this.spaceBG = this.add.tileSprite(0, 0, 800, 600, 'bg');
  this.spaceBG.autoScroll(0, 75);
  window.player = require('./player')(game);
  player.init();
  var bullets = window.bullets = this.add.group();
  bullets.enableBody = true;
  bullets.physicsBodyType = Phaser.Physics.ARCADE;
  bullets.createMultiple(10, 'bullets', 'bullet-green.png');
  bullets.setAll('anchor.x', 0.5);
  bullets.setAll('anchor.y', 1);
  bullets.setAll('outOfBoundsKill', true);
  bullets.setAll('checkWorldBounds', true);
  window.explosions = game.add.group();
  explosions.createMultiple(30, 'explode');
  explosions.forEach(setupEnemy, this);
  window.music = game.add.audio('stage-1');
  window.boom = game.add.audio('boom');
  window.lazer = game.add.audio('lazer');
  window.stage1 = require('./scenes/scene-1')(game);
  stage1.init();
};


},{"./player":3,"./scenes/scene-1":5}],3:[function(require,module,exports){
"use strict";
module.exports = function(game) {
  var player,
      cursors;
  var right_bulletTime = 0,
      left_bulletTime = 0;
  function fireBullet() {
    if (game.time.now > right_bulletTime) {
      var right_bullet = bullets.getFirstExists(false);
      if (right_bullet) {
        right_bullet.reset(player.x, player.y + 16);
        right_bullet.body.velocity.y = -300;
        right_bulletTime = game.time.now + 1000;
        lazer.play();
      }
    }
    if (game.time.now > left_bulletTime + 20) {
      var left_bullet = bullets.getFirstExists(false);
      if (left_bullet) {
        left_bullet.reset(player.x + 26, player.y + 16);
        left_bullet.body.velocity.y = -300;
        left_bulletTime = game.time.now + 1000;
        lazer.play();
      }
    }
  }
  return {
    init: function() {
      player = game.add.sprite((400 - 16), 500, 'ship');
      game.physics.enable(player, Phaser.Physics.ARCADE);
      cursors = game.input.keyboard.createCursorKeys();
    },
    update: function() {
      if (cursors.up.isDown) {
        if (cursors.up.shiftKey) {} else {
          if (player.y > 350)
            player.y -= 4;
        }
      } else if (cursors.down.isDown) {
        if (cursors.down.shiftKey) {} else {
          player.y += 4;
        }
      }
      if (cursors.left.isDown) {
        player.x -= 4;
      } else if (cursors.right.isDown) {
        player.x += 4;
      }
      if (game.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
        fireBullet();
      }
    }
  };
};


},{}],4:[function(require,module,exports){
"use strict";
module.exports = function() {
  this.load.atlas('bullets', 'img/assets/bullets.png', 'img/assets/bullets.json');
  this.load.image('blue_bullet', 'img/assets/blue-bullet.png');
  this.load.image('bg', 'img/backgrounds/bg.png');
  this.load.atlas('atlas', 'img/enemy-fighters/enemy-fighters.png', 'img/enemy-fighters/enemy-fighters.json');
  this.load.image('ship', 'img/space_ship_base.png');
  this.load.spritesheet('explode', 'img/assets/explode.png', 128, 128);
  this.load.audio('boom', ['audio/effects/explode.wav']);
  this.load.audio('lazer', ['audio/effects/lazer.wav']);
  this.load.audio('stage-1', ['audio/background/stage-1.mp3', 'audio/background/stage-1.ogg']);
};


},{}],5:[function(require,module,exports){
"use strict";
module.exports = function(game) {
  var raptors;
  var spawn = function() {
    var x = game.rnd.integerInRange(40, 600),
        y = game.rnd.integerInRange(0, 10);
    var _alien = aliens.create(x, y, 'atlas', 'bad-guy1.png');
    _alien.anchor.setTo(0.5, 0.5);
    _alien.body.moves = true;
    _alien.body.velocity.setTo(0, 100);
  };
  var collisionHandler = function(bullet, alien) {
    bullet.kill();
    alien.kill();
    window.boom.play();
    var x = alien.body.x,
        y = alien.body.y;
    var explosion = explosions.getFirstExists(false);
    explosion.reset(alien.body.x, alien.body.y);
    explosion.play('explode', 30, false, true);
  };
  var spawnRaptor = function() {
    var x = game.rnd.integerInRange(40, 600),
        y = game.rnd.integerInRange(0, 10);
    var _alien = raptors.create(x, y, 'atlas', 'raptor-1.png');
    _alien.anchor.setTo(0.5, 0.5);
    _alien.body.moves = true;
    _alien.body.velocity.setTo(0, 150);
  };
  var enemyFactory;
  return {
    init: function() {
      window.aliens = game.add.group();
      aliens.enableBody = true;
      aliens.physicsBodyType = Phaser.Physics.ARCADE;
      raptors = game.add.group();
      raptors.enableBody = true;
      raptors.physicsBodyType = Phaser.Physics.ARCADE;
      music.play('', 0, 1, true);
      game.time.events.repeat(Phaser.Timer.SECOND * 2, 105, spawn, this);
      game.time.events.repeat(Phaser.Timer.SECOND * 8, 20, spawnRaptor, this);
    },
    update: function() {
      game.physics.arcade.overlap(bullets, aliens, collisionHandler, null, this);
      game.physics.arcade.overlap(bullets, raptors, collisionHandler, null, this);
    },
    destroy: function() {}
  };
};


},{}],6:[function(require,module,exports){
"use strict";
var bulletTime = 0;
function resetBullet(bullet) {
  bullet.kill();
}
;
var right_bulletTime = 0,
    left_bulletTime = 0;
module.exports = function() {
  var bullets = window.bullets;
  var cursors = window.cursors;
  player.update();
  stage1.update();
};


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
