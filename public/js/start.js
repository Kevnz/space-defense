(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var globals = {
  bullets: null,
  enemies: null,
  player: null
};
var update = require('./game/update');
var preload = require('./game/preload');
var create = require('./game/create');
var game = window.game = new Phaser.Game(800, 600, Phaser.AUTO, '', {
  preload: preload,
  create: create,
  update: update
});


},{"./game/create":2,"./game/preload":3,"./game/update":4}],2:[function(require,module,exports){
"use strict";
function resetBullet(bullet) {
  bullet.kill();
}
;
function setupEnemy(enemy) {
  enemy.anchor.x = 0.5;
  enemy.anchor.y = 0.5;
  enemy.animations.add('explode');
}
;
module.exports = function() {
  game.physics.startSystem(Phaser.Physics.ARCADE);
  this.spaceBG = this.add.tileSprite(0, 0, 800, 600, 'bg');
  this.spaceBG.autoScroll(0, 75);
  var ef = window.ef = this.add.sprite((400 - 16), 10, 'atlas');
  ef.frameName = "bad-guy1.png";
  console.log(ef);
  game.physics.enable(ef, Phaser.Physics.ARCADE);
  var player = window.player = this.add.sprite((400 - 16), 500, 'ship');
  game.physics.enable(player, Phaser.Physics.ARCADE);
  var cursors = window.cursors = this.input.keyboard.createCursorKeys();
  var bullets = window.bullets = this.add.group();
  bullets.enableBody = true;
  bullets.physicsBodyType = Phaser.Physics.ARCADE;
  bullets.createMultiple(10, 'bullets', 'bullet-green.png');
  bullets.setAll('anchor.x', 0.5);
  bullets.setAll('anchor.y', 1);
  bullets.setAll('outOfBoundsKill', true);
  bullets.setAll('checkWorldBounds', true);
  window.aliens = game.add.group();
  aliens.enableBody = true;
  aliens.physicsBodyType = Phaser.Physics.ARCADE;
  window.explosions = game.add.group();
  explosions.createMultiple(30, 'explode');
  explosions.forEach(setupEnemy, this);
  window.music = game.add.audio('stage-1');
  window.boom = game.add.audio('boom');
  window.lazer = game.add.audio('lazer');
  music.play('', 0, 1, true);
  var spawn = function() {
    console.log('spawn');
    var x = game.rnd.integerInRange(40, 600),
        y = game.rnd.integerInRange(40, 300);
    var _alien = aliens.create(x, y, 'atlas', 'raptor-3-c.png');
    _alien.anchor.setTo(0.5, 0.5);
    _alien.body.moves = true;
    _alien.body.velocity.setTo(0, 100);
  };
  game.time.events.repeat(Phaser.Timer.SECOND * 2, 25, spawn, this);
};


},{}],3:[function(require,module,exports){
"use strict";
module.exports = function() {
  this.load.atlas('bullets', 'img/assets/bullets.png', 'img/assets/bullets.json');
  this.load.image('blue_bullet', 'img/assets/blue-bullet.png');
  this.load.image('bg', 'img/backgrounds/bg.png');
  this.load.atlas('atlas', 'img/enemy-fighters/enemy-fighters.png', 'img/enemy-fighters/enemy-fighters.json');
  this.load.image('ship', 'img/space_ship_base.png');
  this.load.spritesheet('explode', 'img/assets/explode.png', 128, 128);
  this.load.audio('boom', ['audio/effects/explode.wav']);
  this.load.audio('lazer', ['audio/effects/lazer.wav']);
  this.load.audio('stage-1', ['audio/background/stage-1.mp3', 'audio/background/stage-1.ogg']);
};


},{}],4:[function(require,module,exports){
"use strict";
var bulletTime = 0;
function resetBullet(bullet) {
  bullet.kill();
}
;
function collisionHandler(bullet, alien) {
  console.log(arguments);
  bullet.kill();
  alien.kill();
  window.boom.play();
  var x = alien.body.x,
      y = alien.body.y;
  var explosion = explosions.getFirstExists(false);
  explosion.reset(alien.body.x, alien.body.y);
  explosion.play('explode', 30, false, true);
}
;
var right_bulletTime = 0,
    left_bulletTime = 0;
module.exports = function() {
  var bullets = window.bullets;
  var cursors = window.cursors;
  function fireBullet() {
    if (game.time.now > right_bulletTime) {
      var right_bullet = bullets.getFirstExists(false);
      if (right_bullet) {
        right_bullet.reset(player.x, player.y + 16);
        right_bullet.body.velocity.y = -300;
        right_bulletTime = game.time.now + 1000;
        lazer.play();
      }
    }
    if (game.time.now > left_bulletTime + 20) {
      var left_bullet = bullets.getFirstExists(false);
      if (left_bullet) {
        left_bullet.reset(player.x + 26, player.y + 16);
        left_bullet.body.velocity.y = -300;
        left_bulletTime = game.time.now + 1000;
        lazer.play();
      }
    }
  }
  if (cursors.up.isDown) {
    if (cursors.up.shiftKey) {} else {
      if (player.y > 350)
        player.y -= 4;
    }
  } else if (cursors.down.isDown) {
    if (cursors.down.shiftKey) {} else {
      player.y += 4;
    }
  }
  if (cursors.left.isDown) {
    player.x -= 4;
  } else if (cursors.right.isDown) {
    player.x += 4;
  }
  if (this.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
    fireBullet();
  }
  game.physics.arcade.overlap(bullets, ef, collisionHandler, null, this);
  game.physics.arcade.overlap(bullets, aliens, collisionHandler, null, this);
};


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXEtldmluXFxQcm9qZWN0c1xcc3BhY2UtZGVmZW5zZVxcbm9kZV9tb2R1bGVzXFxicm93c2VyaWZ5XFxub2RlX21vZHVsZXNcXGJyb3dzZXItcGFja1xcX3ByZWx1ZGUuanMiLCJDOlxcVXNlcnNcXEtldmluXFxQcm9qZWN0c1xcc3BhY2UtZGVmZW5zZVxccHVibGljXFxqc1xcZ2FtZS5qcyIsIkM6XFxVc2Vyc1xcS2V2aW5cXFByb2plY3RzXFxzcGFjZS1kZWZlbnNlXFxwdWJsaWNcXGpzXFxnYW1lXFxjcmVhdGUuanMiLCJDOlxcVXNlcnNcXEtldmluXFxQcm9qZWN0c1xcc3BhY2UtZGVmZW5zZVxccHVibGljXFxqc1xcZ2FtZVxccHJlbG9hZC5qcyIsIkM6XFxVc2Vyc1xcS2V2aW5cXFByb2plY3RzXFxzcGFjZS1kZWZlbnNlXFxwdWJsaWNcXGpzXFxnYW1lXFx1cGRhdGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUFJLENBQUosRUFBSSxDQUFBLE9BQU8sRUFBRztBQUNWLENBQUEsUUFBTyxDQUFFLEtBQUk7QUFDYixDQUFBLFFBQU8sQ0FBRSxLQUFJO0FBQ2IsQ0FBQSxPQUFNLENBQUUsS0FBSTtDQUFBLEFBQ2YsQ0FBQTtBQUNHLENBQUosRUFBSSxDQUFBLE1BQU0sRUFBRyxDQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNsQyxDQUFKLEVBQUksQ0FBQSxPQUFPLEVBQUcsQ0FBQSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBRTtBQUNyQyxDQUFKLEVBQUksQ0FBQSxNQUFNLEVBQUcsQ0FBQSxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFFbEMsQ0FBSixFQUFJLENBQUEsSUFBSSxFQUFHLENBQUEsTUFBTSxLQUFLLEVBQUcsSUFBSSxDQUFBLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBRSxJQUFHLENBQUUsQ0FBQSxNQUFNLEtBQUssQ0FBRSxHQUFF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Q2pCO0NBQUEsRUFDSjtBQUNELENBREMsS0FDRyxPQUFPLEtBQUssT0FBTyxDQUN2QjtBQUNJLENBQUEsU0FBTSxFQUFFLEdBQUksRUFBQyxDQUFDO0dBQ2pCLEtBQ0ksS0FBSSxPQUFPLE1BQU0sT0FBTyxDQUM3QjtBQUNHLENBQUEsU0FBTSxFQUFFLEdBQUksRUFBQyxDQUFDO0dBQ2hCO0FBQ0QsQ0FEQyxLQUNHLElBQUksTUFBTSxTQUFTLE9BQU8sQ0FBQyxNQUFNLFNBQVMsU0FBUyxDQUFDLENBQ3hEO0FBQ0ksQ0FBQSxhQUFVLEVBQUUsQ0FBRTtHQUNqQjtBQUVBLENBRkEsS0FFSSxRQUFRLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBRSxHQUFFLENBQUUsaUJBQWdCLENBQUUsS0FBSSxDQUFFLEtBQUksQ0FBQyxDQUFDO0FBQ3ZFLENBQUEsS0FBSSxRQUFRLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBRSxPQUFNLENBQUUsaUJBQWdCLENBQUUsS0FBSSxDQUFFLEtBQUksQ0FBQyxDQUFDO0NBQ25GLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKX12YXIgZj1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwoZi5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxmLGYuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIGdsb2JhbHMgPSB7XHJcbiAgICBidWxsZXRzOiBudWxsLFxyXG4gICAgZW5lbWllczogbnVsbCxcclxuICAgIHBsYXllcjogbnVsbFxyXG59XHJcbnZhciB1cGRhdGUgPSByZXF1aXJlKCcuL2dhbWUvdXBkYXRlJyk7XHJcbnZhciBwcmVsb2FkID0gcmVxdWlyZSgnLi9nYW1lL3ByZWxvYWQnKSA7XHJcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL2dhbWUvY3JlYXRlJyk7XHJcbiBcclxudmFyIGdhbWUgPSB3aW5kb3cuZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSg4MDAsIDYwMCwgUGhhc2VyLkFVVE8sICcnLCB7IHByZWxvYWQ6IHByZWxvYWQsIGNyZWF0ZTogY3JlYXRlLCB1cGRhdGU6IHVwZGF0ZSB9KTtcclxuIiwiIGZ1bmN0aW9uIHJlc2V0QnVsbGV0IChidWxsZXQpIHtcclxuXHJcbiAgICBidWxsZXQua2lsbCgpO1xyXG5cclxufVxyXG47XHJcbmZ1bmN0aW9uIHNldHVwRW5lbXkgKGVuZW15KSB7XHJcblxyXG4gICAgZW5lbXkuYW5jaG9yLnggPSAwLjU7XHJcbiAgICBlbmVteS5hbmNob3IueSA9IDAuNTtcclxuICAgIGVuZW15LmFuaW1hdGlvbnMuYWRkKCdleHBsb2RlJyk7XHJcblxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAgICBmdW5jdGlvbigpe1xyXG5cclxuICAgIGdhbWUucGh5c2ljcy5zdGFydFN5c3RlbShQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xyXG5cclxuICAgIHRoaXMuc3BhY2VCRyA9ICB0aGlzLmFkZC50aWxlU3ByaXRlKDAsIDAsIDgwMCwgNjAwLCAnYmcnKTsgIFxyXG4gICAgdGhpcy5zcGFjZUJHLmF1dG9TY3JvbGwoMCwgNzUpOyBcclxuXHJcbiAgICB2YXIgZWYgPSB3aW5kb3cuZWYgPSB0aGlzLmFkZC5zcHJpdGUoKDQwMCAtIDE2KSwgMTAsICdhdGxhcycpO1xyXG4gICAgZWYuZnJhbWVOYW1lID0gXCJiYWQtZ3V5MS5wbmdcIjtcclxuICAgIGNvbnNvbGUubG9nKGVmKTtcclxuICAgIGdhbWUucGh5c2ljcy5lbmFibGUoZWYsIFBoYXNlci5QaHlzaWNzLkFSQ0FERSk7XHJcbiAgICB2YXIgcGxheWVyID0gd2luZG93LnBsYXllciA9IHRoaXMuYWRkLnNwcml0ZSgoNDAwIC0gMTYpLCA1MDAsICdzaGlwJyk7XHJcbiAgICBnYW1lLnBoeXNpY3MuZW5hYmxlKHBsYXllciwgUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcclxuICAgIHZhciBjdXJzb3JzID0gd2luZG93LmN1cnNvcnMgPSB0aGlzLmlucHV0LmtleWJvYXJkLmNyZWF0ZUN1cnNvcktleXMoKTtcclxuXHJcbiAgICB2YXIgYnVsbGV0cyA9IHdpbmRvdy5idWxsZXRzID0gdGhpcy5hZGQuZ3JvdXAoKTtcclxuXHJcbiAgICBidWxsZXRzLmVuYWJsZUJvZHkgPSB0cnVlO1xyXG5cclxuICAgIGJ1bGxldHMucGh5c2ljc0JvZHlUeXBlID0gUGhhc2VyLlBoeXNpY3MuQVJDQURFO1xyXG5cclxuICAgIGJ1bGxldHMuY3JlYXRlTXVsdGlwbGUoMTAsICdidWxsZXRzJywgJ2J1bGxldC1ncmVlbi5wbmcnKTtcclxuICAgIGJ1bGxldHMuc2V0QWxsKCdhbmNob3IueCcsIDAuNSk7XHJcbiAgICBidWxsZXRzLnNldEFsbCgnYW5jaG9yLnknLCAxKTtcclxuICAgIGJ1bGxldHMuc2V0QWxsKCdvdXRPZkJvdW5kc0tpbGwnLCB0cnVlKTtcclxuICAgIGJ1bGxldHMuc2V0QWxsKCdjaGVja1dvcmxkQm91bmRzJywgdHJ1ZSk7XHJcblxyXG4gICAgd2luZG93LmFsaWVucyA9IGdhbWUuYWRkLmdyb3VwKCk7XHJcbiAgICBhbGllbnMuZW5hYmxlQm9keSA9IHRydWU7XHJcbiAgICBhbGllbnMucGh5c2ljc0JvZHlUeXBlID0gUGhhc2VyLlBoeXNpY3MuQVJDQURFO1xyXG5cclxuICAgIHdpbmRvdy5leHBsb3Npb25zID0gZ2FtZS5hZGQuZ3JvdXAoKTtcclxuICAgIGV4cGxvc2lvbnMuY3JlYXRlTXVsdGlwbGUoMzAsICdleHBsb2RlJyk7XHJcbiAgICBleHBsb3Npb25zLmZvckVhY2goc2V0dXBFbmVteSwgdGhpcyk7XHJcbiAgICB3aW5kb3cubXVzaWMgPSBnYW1lLmFkZC5hdWRpbygnc3RhZ2UtMScpO1xyXG4gICAgd2luZG93LmJvb20gPSBnYW1lLmFkZC5hdWRpbygnYm9vbScpO1xyXG4gICAgd2luZG93LmxhemVyID0gZ2FtZS5hZGQuYXVkaW8oJ2xhemVyJyk7XHJcblxyXG4gICAgXHJcbiAgICBtdXNpYy5wbGF5KCcnLDAsMSx0cnVlKTtcclxuICAgIHZhciBzcGF3biA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnc3Bhd24nKTtcclxuICAgICAgICB2YXIgeCA9IGdhbWUucm5kLmludGVnZXJJblJhbmdlKDQwLCA2MDApICAsIHkgPSBnYW1lLnJuZC5pbnRlZ2VySW5SYW5nZSg0MCwgMzAwKTtcclxuICAgICAgICB2YXIgX2FsaWVuID0gYWxpZW5zLmNyZWF0ZSh4LCB5LCAnYXRsYXMnLCAncmFwdG9yLTMtYy5wbmcnKTtcclxuICAgICAgICBfYWxpZW4uYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcclxuIFxyXG4gICAgICAgIF9hbGllbi5ib2R5Lm1vdmVzID0gdHJ1ZTtcclxuICAgICAgICBfYWxpZW4uYm9keS52ZWxvY2l0eS5zZXRUbygwLCAxMDApIDsgXHJcbiAgICB9O1xyXG4gICAgZ2FtZS50aW1lLmV2ZW50cy5yZXBlYXQoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIDIsIDI1LCBzcGF3biwgdGhpcyk7XHJcbn1cclxuXHJcbiAiLCJtb2R1bGUuZXhwb3J0cyA9ICBmdW5jdGlvbiAoKSB7XHJcbiBcclxuICAgIHRoaXMubG9hZC5hdGxhcygnYnVsbGV0cycsICdpbWcvYXNzZXRzL2J1bGxldHMucG5nJywgJ2ltZy9hc3NldHMvYnVsbGV0cy5qc29uJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2JsdWVfYnVsbGV0JywgJ2ltZy9hc3NldHMvYmx1ZS1idWxsZXQucG5nJyk7XHJcbiAgICB0aGlzLmxvYWQuaW1hZ2UoJ2JnJywgJ2ltZy9iYWNrZ3JvdW5kcy9iZy5wbmcnKTsgXHJcbiAgICB0aGlzLmxvYWQuYXRsYXMoJ2F0bGFzJywgJ2ltZy9lbmVteS1maWdodGVycy9lbmVteS1maWdodGVycy5wbmcnLCAnaW1nL2VuZW15LWZpZ2h0ZXJzL2VuZW15LWZpZ2h0ZXJzLmpzb24nKTtcclxuICAgIHRoaXMubG9hZC5pbWFnZSgnc2hpcCcsICdpbWcvc3BhY2Vfc2hpcF9iYXNlLnBuZycpO1xyXG4gICAgdGhpcy5sb2FkLnNwcml0ZXNoZWV0KCdleHBsb2RlJywgJ2ltZy9hc3NldHMvZXhwbG9kZS5wbmcnLCAxMjgsIDEyOCk7XHJcbiAgICB0aGlzLmxvYWQuYXVkaW8oJ2Jvb20nLCBbJ2F1ZGlvL2VmZmVjdHMvZXhwbG9kZS53YXYnXSk7XHJcbiAgICB0aGlzLmxvYWQuYXVkaW8oJ2xhemVyJywgWydhdWRpby9lZmZlY3RzL2xhemVyLndhdiddKTtcclxuICAgIHRoaXMubG9hZC5hdWRpbygnc3RhZ2UtMScsIFsnYXVkaW8vYmFja2dyb3VuZC9zdGFnZS0xLm1wMycsICdhdWRpby9iYWNrZ3JvdW5kL3N0YWdlLTEub2dnJ10pO1xyXG59IiwidmFyIGJ1bGxldFRpbWUgPSAwO1xyXG4gZnVuY3Rpb24gcmVzZXRCdWxsZXQgKGJ1bGxldCkge1xyXG5cclxuICAgIGJ1bGxldC5raWxsKCk7XHJcblxyXG59O1xyXG5cclxuZnVuY3Rpb24gY29sbGlzaW9uSGFuZGxlciAoYnVsbGV0LCBhbGllbikge1xyXG5jb25zb2xlLmxvZyhhcmd1bWVudHMpO1xyXG4gICAgLy8gIFdoZW4gYSBidWxsZXQgaGl0cyBhbiBhbGllbiB3ZSBraWxsIHRoZW0gYm90aFxyXG4gICAgYnVsbGV0LmtpbGwoKTtcclxuICAgIGFsaWVuLmtpbGwoKTtcclxuICAgIHdpbmRvdy5ib29tLnBsYXkoKTtcclxudmFyIHggPSBhbGllbi5ib2R5LngsIHkgPWFsaWVuLmJvZHkueVxyXG4gICAgdmFyIGV4cGxvc2lvbiA9IGV4cGxvc2lvbnMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpO1xyXG4gICAgZXhwbG9zaW9uLnJlc2V0KGFsaWVuLmJvZHkueCwgYWxpZW4uYm9keS55KTtcclxuICAgIGV4cGxvc2lvbi5wbGF5KCdleHBsb2RlJywgMzAsIGZhbHNlLCB0cnVlKTtcclxuICAgIC8vICBJbmNyZWFzZSB0aGUgc2NvcmVcclxuICAgLy8gc2NvcmUgKz0gMjA7XHJcbiAgICAvL3Njb3JlVGV4dC50ZXh0ID0gc2NvcmVTdHJpbmcgKyBzY29yZTtcclxuXHJcbiAgICAvLyAgQW5kIGNyZWF0ZSBhbiBleHBsb3Npb24gOilcclxuICAgIC8vdmFyIGV4cGxvc2lvbiA9IGV4cGxvc2lvbnMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpO1xyXG4gICAgLy9leHBsb3Npb24ucmVzZXQoYWxpZW4uYm9keS54LCBhbGllbi5ib2R5LnkpO1xyXG4gICAgLy9leHBsb3Npb24ucGxheSgna2Fib29tJywgMzAsIGZhbHNlLCB0cnVlKTtcclxuXHJcbiAgICAvL2lmIChhbGllbnMuY291bnRMaXZpbmcoKSA9PSAwKVxyXG4gICAgLy97XHJcbiAgICAgICAvLyBzY29yZSArPSAxMDAwO1xyXG4gICAgICAvLyAgc2NvcmVUZXh0LnRleHQgPSBzY29yZVN0cmluZyArIHNjb3JlO1xyXG5cclxuICAgICAgIC8vIGVuZW15QnVsbGV0cy5jYWxsQWxsKCdraWxsJyx0aGlzKTtcclxuICAgICAgIC8vIHN0YXRlVGV4dC50ZXh0ID0gXCIgWW91IFdvbiwgXFxuIENsaWNrIHRvIHJlc3RhcnRcIjtcclxuICAgICAgIC8vIHN0YXRlVGV4dC52aXNpYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy90aGUgXCJjbGljayB0byByZXN0YXJ0XCIgaGFuZGxlclxyXG4gICAgICAvLyAgZ2FtZS5pbnB1dC5vblRhcC5hZGRPbmNlKHJlc3RhcnQsdGhpcyk7XHJcbiAgICAvL31cclxuXHJcbiAgICAvL2dhbWUuYWRkLnNwcml0ZSgoNDAwIC0gMTYpLCAxMCwgJ2F0bGFzJyk7XHJcbiAgICAvL2VmLmZyYW1lTmFtZSA9IFwiYmFkLWd1eTEucG5nXCI7XHJcbn07IFxyXG4gdmFyIHJpZ2h0X2J1bGxldFRpbWUgPSAwLCBsZWZ0X2J1bGxldFRpbWUgPSAwOyBcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBidWxsZXRzID0gd2luZG93LmJ1bGxldHM7XHJcblxyXG4gICAgXHJcbiAgICB2YXIgY3Vyc29ycyA9IHdpbmRvdy5jdXJzb3JzOyBcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZmlyZUJ1bGxldCAoKSB7IFxyXG4gICAgICAgICAgICBpZiAoIGdhbWUudGltZS5ub3cgPiByaWdodF9idWxsZXRUaW1lKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmlnaHRfYnVsbGV0ID0gYnVsbGV0cy5nZXRGaXJzdEV4aXN0cyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmlnaHRfYnVsbGV0KVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICBBbmQgZmlyZSBpdFxyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0X2J1bGxldC5yZXNldChwbGF5ZXIueCwgcGxheWVyLnkgKyAxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRfYnVsbGV0LmJvZHkudmVsb2NpdHkueSA9IC0zMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRfYnVsbGV0VGltZSA9IGdhbWUudGltZS5ub3cgKyAxMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhemVyLnBsYXkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIGdhbWUudGltZS5ub3cgPiBsZWZ0X2J1bGxldFRpbWUgKyAyMClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlZnRfYnVsbGV0ID0gYnVsbGV0cy5nZXRGaXJzdEV4aXN0cyhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVmdF9idWxsZXQpXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIEFuZCBmaXJlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdF9idWxsZXQucmVzZXQocGxheWVyLnggKyAyNiwgcGxheWVyLnkgKyAxNik7XHJcbiAgICAgICAgICAgICAgICAgICAgbGVmdF9idWxsZXQuYm9keS52ZWxvY2l0eS55ID0gLTMwMDtcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0X2J1bGxldFRpbWUgPSBnYW1lLnRpbWUubm93ICsgMTAwMDtcclxuICAgICAgICAgICAgICAgICAgICBsYXplci5wbGF5KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vICBGb3IgZXhhbXBsZSB0aGlzIGNoZWNrcyBpZiB0aGUgdXAgb3IgZG93biBrZXlzIGFyZSBwcmVzc2VkIGFuZCBtb3ZlcyB0aGUgY2FtZXJhIGFjY29yZGluZ2x5LlxyXG4gICAgICAgIGlmIChjdXJzb3JzLnVwLmlzRG93bilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8vICBJZiB0aGUgc2hpZnQga2V5IGlzIGFsc28gcHJlc3NlZCB0aGVuIHRoZSB3b3JsZCBpcyByb3RhdGVkXHJcbiAgICAgICAgICAgIGlmIChjdXJzb3JzLnVwLnNoaWZ0S2V5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvL2dhbWUud29ybGQucm90YXRpb24gKz0gMC4wNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGlmKHBsYXllci55ID4gMzUwKSBwbGF5ZXIueSAtPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGN1cnNvcnMuZG93bi5pc0Rvd24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAoY3Vyc29ycy5kb3duLnNoaWZ0S2V5KVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvL2dhbWUud29ybGQucm90YXRpb24gLT0gMC4wNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHBsYXllci55ICs9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGN1cnNvcnMubGVmdC5pc0Rvd24pXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwbGF5ZXIueCAtPSA0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjdXJzb3JzLnJpZ2h0LmlzRG93bilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgcGxheWVyLnggKz0gNDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaW5wdXQua2V5Ym9hcmQuaXNEb3duKFBoYXNlci5LZXlib2FyZC5TUEFDRUJBUikpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmaXJlQnVsbGV0KCkgO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2NvbnNvbGUubG9nKGN1cnNvcnMpO1xyXG4gICAgICAgICBnYW1lLnBoeXNpY3MuYXJjYWRlLm92ZXJsYXAoYnVsbGV0cywgZWYsIGNvbGxpc2lvbkhhbmRsZXIsIG51bGwsIHRoaXMpO1xyXG4gICAgICAgICBnYW1lLnBoeXNpY3MuYXJjYWRlLm92ZXJsYXAoYnVsbGV0cywgYWxpZW5zLCBjb2xsaXNpb25IYW5kbGVyLCBudWxsLCB0aGlzKTtcclxufTtcclxuIl19
