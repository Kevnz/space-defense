(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var globals = {
  bullets: null,
  enemies: null,
  player: null
};
var update = require('./game/update');
var preload = require('./game/preload');
var create = require('./game/create');
var game = window.game = new Phaser.Game(800, 600, Phaser.AUTO, '', {
  preload: preload,
  create: create,
  update: update
});


},{"./game/create":2,"./game/preload":3,"./game/update":4}],2:[function(require,module,exports){
"use strict";
function resetBullet(bullet) {
  bullet.kill();
}
;
module.exports = function() {
  console.log(this);
  this.spaceBG = this.add.tileSprite(0, 0, 800, 600, 'bg');
  this.spaceBG.autoScroll(0, 75);
  var ef = window.ef = this.add.sprite((400 - 16), 10, 'atlas');
  ef.frameName = "bad-guy1.png";
  var player = window.player = this.add.sprite((400 - 16), 500, 'ship');
  var cursors = window.cursors = this.input.keyboard.createCursorKeys();
  var bullets = window.bullets = this.add.group();
  bullets.enableBody = true;
  bullets.physicsBodyType = Phaser.Physics.ARCADE;
  bullets.createMultiple(10, 'bullets');
  bullets.setAll('anchor.x', 0.5);
  bullets.setAll('anchor.y', 1);
  bullets.setAll('outOfBoundsKill', true);
  bullets.setAll('checkWorldBounds', true);
};


},{}],3:[function(require,module,exports){
"use strict";
module.exports = function() {
  this.load.atlas('bullets', 'img/assets/bullets.png', 'img/assets/bullets.json');
  this.load.image('bg', 'img/backgrounds/bg.png');
  this.load.image('ship', 'img/space_ship_base.png');
  this.load.atlas('atlas', 'img/enemy-fighters/enemy-fighters.png', 'img/enemy-fighters/enemy-fighters.json');
  this.load.image('ship', 'img/space_ship_base.png');
};


},{}],4:[function(require,module,exports){
"use strict";
var bulletTime = 0;
function resetBullet(bullet) {
  bullet.kill();
}
;
function collisionHandler(bullet, alien) {
  console.log(arguments);
  bullet.kill();
  alien.kill();
}
;
module.exports = function() {
  var bullets = window.bullets;
  var right_bulletTime = 0,
      left_bulletTime = 0;
  var game = window.game;
  var cursors = window.cursors;
  function fireBullet() {
    if (game.time.now > right_bulletTime) {
      var right_bullet = bullets.getFirstExists(false);
      if (right_bullet) {
        right_bullet.reset(player.x, player.y + 16);
        right_bullet.body.velocity.y = -300;
        right_bulletTime = game.time.now + 200;
      }
    }
    if (game.time.now > left_bulletTime) {
      var left_bullet = bullets.getFirstExists(false);
      if (left_bullet) {
        left_bullet.reset(player.x + 26, player.y + 16);
        left_bullet.body.velocity.y = -300;
        left_bulletTime = game.time.now + 200;
      }
    }
  }
  if (cursors.up.isDown) {
    if (cursors.up.shiftKey) {} else {
      if (player.y > 350)
        player.y -= 4;
    }
  } else if (cursors.down.isDown) {
    if (cursors.down.shiftKey) {} else {
      player.y += 4;
    }
  }
  if (cursors.left.isDown) {
    player.x -= 4;
  } else if (cursors.right.isDown) {
    player.x += 4;
  }
  if (this.input.keyboard.isDown(Phaser.Keyboard.SPACEBAR)) {
    fireBullet();
  }
  game.physics.arcade.overlap(bullets, ef, collisionHandler, null, this);
};


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
